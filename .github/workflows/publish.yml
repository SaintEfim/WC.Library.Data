name: Publish NuGet Package

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    name: Build and Publish NuGet Packages

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8.0.x

      - name: Check for changes in project files
        id: check-changes
        run: |
          # Проверяем изменения
          if git rev-parse HEAD^ >/dev/null 2>&1; then
            CHANGED_FILES=$(git diff --name-only HEAD^ HEAD)
          else
            echo "No previous commit found. Assuming all files are changed."
            CHANGED_FILES=$(git ls-files)
          fi

          echo "Changed files: $CHANGED_FILES"

          # Определяем, какие проекты изменены
          if echo "$CHANGED_FILES" | grep -q "src/WC.Library.Data.Abstractions"; then
            echo "publish_abstractions=true" >> $GITHUB_ENV
          fi
          if echo "$CHANGED_FILES" | grep -q "src/WC.Library.Data"; then
            echo "publish_data=true" >> $GITHUB_ENV
          fi
          if echo "$CHANGED_FILES" | grep -q "src/WC.Library.Data.PostgreSql"; then
            echo "publish_postgresql=true" >> $GITHUB_ENV
          fi

      - name: Skip if no changes detected
        if: ${{ env.publish_abstractions != 'true' && env.publish_data != 'true' && env.publish_postgresql != 'true' }}
        run: echo "No relevant changes detected. Skipping."

      - name: Get latest versions
        if: ${{ env.publish_abstractions == 'true' || env.publish_data == 'true' || env.publish_postgresql == 'true' }}
        id: get-latest-versions
        run: |
          get_latest_version() {
            PACKAGE_ID=$1
            VERSION=$(curl -s https://api.nuget.org/v3-flatcontainer/${PACKAGE_ID}/index.json | jq -r '.versions[-1]')

            if [ -z "$VERSION" ]; then
              echo "No versions found for $PACKAGE_ID. Starting from 1.0.0."
              echo "1.0.0"
            else
              echo $VERSION | awk -F. -v OFS=. '{$NF++; print}'
            fi
          }

          if [[ ${{ env.publish_abstractions }} == 'true' ]]; then
            abstractions_version=$(get_latest_version wc.library.data.abstractions)
            echo "abstractions_version=$abstractions_version" >> $GITHUB_ENV
          fi

          if [[ ${{ env.publish_data }} == 'true' ]]; then
            data_version=$(get_latest_version wc.library.data)
            echo "data_version=$data_version" >> $GITHUB_ENV
          fi

          if [[ ${{ env.publish_postgresql }} == 'true' ]]; then
            postgresql_version=$(get_latest_version wc.library.data.postgresql)
            echo "postgresql_version=$postgresql_version" >> $GITHUB_ENV
          fi

      - name: Build and pack WC.Library.Data.Abstractions
        if: ${{ env.publish_abstractions == 'true' }}
        run: |
          dotnet pack src/WC.Library.Data.Abstractions/WC.Library.Data.Abstractions.csproj -c Release -o ./out /p:Version=${{ env.abstractions_version }}

      - name: Build and pack WC.Library.Data
        if: ${{ env.publish_data == 'true' }}
        run: |
          dotnet pack src/WC.Library.Data/WC.Library.Data.csproj -c Release -o ./out /p:Version=${{ env.data_version }}

      - name: Wait for WC.Library.Data.Abstractions availability
        if: ${{ env.publish_abstractions == 'true' && env.publish_data == 'true' }}
        run: |
          echo "Waiting for WC.Library.Data.Abstractions to be available on NuGet..."
          PACKAGE_ID="wc.library.data.abstractions"
          until curl -s https://api.nuget.org/v3-flatcontainer/${PACKAGE_ID}/${{ env.abstractions_version }}/${PACKAGE_ID}.nuspec; do
            echo "Not available yet. Retrying in 10 seconds..."
            sleep 10
          done
          echo "WC.Library.Data.Abstractions is now available."

      - name: Build and pack WC.Library.Data.PostgreSql
        if: ${{ env.publish_postgresql == 'true' }}
        run: |
          dotnet pack src/WC.Library.Data.PostgreSql/WC.Library.Data.PostgreSql.csproj -c Release -o ./out /p:Version=${{ env.postgresql_version }}

      - name: Publish packages to NuGet
        run: |
          dotnet nuget push ./out/*.nupkg --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json --skip-duplicate
