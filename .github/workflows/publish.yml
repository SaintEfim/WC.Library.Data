name: Publish Libraries to NuGet

on:
  push:
    branches:
      - main

jobs:
  publish:
    runs-on: ubuntu-latest

    env:
      NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8.0.x

      - name: Build and Publish Libraries
        run: |
          publish_package() {
            PACKAGE_ID=$1
            PROJECT_PATH=$2
            echo "Processing package: $PACKAGE_ID"

            # Get latest version from NuGet
            PACKAGE_VERSION=$(curl -s https://api.nuget.org/v3-flatcontainer/${PACKAGE_ID}/index.json | jq -r '.versions[-1]')
            if [ -z "$PACKAGE_VERSION" ]; then
              echo "No versions found for $PACKAGE_ID. Starting from 1.0.0."
              NEW_VERSION="1.0.0"
            else
              echo "Latest version of $PACKAGE_ID: $PACKAGE_VERSION"
              NEW_VERSION=$(echo $PACKAGE_VERSION | awk -F. -v OFS=. '{$NF++; print}')
            fi
            echo "New version: $NEW_VERSION"

            # Build, pack, and push package
            dotnet build $PROJECT_PATH --configuration Release
            dotnet pack $PROJECT_PATH --configuration Release /p:Version=$NEW_VERSION
            dotnet nuget push $PROJECT_PATH/bin/Release/*.nupkg -k $NUGET_API_KEY -s https://api.nuget.org/v3/index.json --skip-duplicate
          }

          # List of packages to process
          publish_package "wc.library.data.abstractions" "src/WC.Library.Data.Abstractions/WC.Library.Data.Abstractions.csproj"
          publish_package "wc.library.data" "src/WC.Library.Data/WC.Library.Data.csproj"
          publish_package "wc.library.data.postgresql" "src/WC.Library.Data.PostgreSql/WC.Library.Data.PostgreSql.csproj"

